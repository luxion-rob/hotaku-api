name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.22.2'
  NODE_VERSION: '20'

jobs:
  # Test Job
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: hotaku_test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

    - name: Run tests
      env:
        DB_HOST: localhost
        DB_PORT: 3306
        DB_USER: root
        DB_PASSWORD: testpassword
        DB_NAME: hotaku_test_db
        JWT_SECRET: test-secret-key
      run: go test -v -race ./...

    # TODO: Coverage reporting temporarily disabled
    # - name: Generate coverage report
    #   run: go tool cover -html=coverage.out -o coverage.html

    # - name: Upload coverage reports
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: coverage-report
    #     path: |
    #       coverage.out
    #       coverage.html

    # - name: Check coverage threshold
    #   run: |
    #     COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
    #     echo "Current coverage: ${COVERAGE}%"
    #     if (( $(echo "$COVERAGE < 50" | bc -l) )); then
    #       echo "Coverage is below 50%"
    #       exit 1
    #     fi

  # Build Job
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build application
      run: |
        go build -v -o bin/hotaku-api .
        chmod +x bin/hotaku-api

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: hotaku-api-binary
        path: bin/hotaku-api

  # TODO: Security Scan Job - Commented out for now
  # Enable this when ready to run security scanning
  # security:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   needs: test
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #
  #   - name: Set up Go
  #     uses: actions/setup-go@v5
  #     with:
  #       go-version: ${{ env.GO_VERSION }}
  #
  #   - name: Run Gosec Security Scanner
  #     uses: securego/gosec@master
  #     with:
  #       args: ./...

  # TODO: Docker Build Job - Commented out for now
  # Enable this when ready to publish to container registry
  # docker:
  #   name: Docker Build
  #   runs-on: ubuntu-latest
  #   needs: [test, build]
  #   if: github.ref == 'refs/heads/main'
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3
  #
  #   - name: Log in to GitHub Container Registry
  #     uses: docker/login-action@v3
  #     with:
  #       registry: ghcr.io
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.GITHUB_TOKEN }}
  #
  #   - name: Extract metadata
  #     id: meta
  #     uses: docker/metadata-action@v5
  #     with:
  #       images: ghcr.io/${{ github.repository }}
  #       tags: |
  #         type=ref,event=branch
  #         type=ref,event=pr
  #         type=sha,prefix={{branch}}-
  #
  #   - name: Build and push Docker image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       file: ./Dockerfile
  #       push: true
  #       tags: ${{ steps.meta.outputs.tags }}
  #       labels: ${{ steps.meta.outputs.labels }}
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max

  # Documentation Job for GitHub Pages
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        npm init -y
        npm install -g @apidevtools/swagger-parser
        npm install redoc-cli -g

    - name: Generate API documentation
      run: |
        mkdir -p docs
        echo "# Hotaku API Documentation" > docs/index.md
        echo "" >> docs/index.md
        echo "## Overview" >> docs/index.md
        echo "Welcome to the Hotaku API documentation. This API is built with Go and Gin framework." >> docs/index.md
        echo "" >> docs/index.md
        echo "## Endpoints" >> docs/index.md
        echo "" >> docs/index.md
        echo "### Health Check" >> docs/index.md
        echo "- **GET** \`/\` - Returns API health status" >> docs/index.md
        echo "" >> docs/index.md
        echo "## Response Format" >> docs/index.md
        echo "" >> docs/index.md
        echo "All responses follow this structure:" >> docs/index.md
        echo "" >> docs/index.md
        echo "\`\`\`json" >> docs/index.md
        echo "{" >> docs/index.md
        echo "  \"status\": \"healthy\"," >> docs/index.md
        echo "  \"message\": \"API is running smoothly\"," >> docs/index.md
        echo "  \"timestamp\": 1640995200," >> docs/index.md
        echo "  \"version\": \"1.0.0\"" >> docs/index.md
        echo "}" >> docs/index.md
        echo "\`\`\`" >> docs/index.md

    # TODO: Coverage report download temporarily disabled
    # - name: Download coverage report
    #   uses: actions/download-artifact@v4
    #   with:
    #     name: coverage-report
    #     path: docs/

    - name: Generate HTML documentation
      run: |
        cat > docs/_config.yml << EOF
        theme: jekyll-theme-minimal
        title: Hotaku API
        description: Go Gin REST API Documentation
        plugins:
          - jekyll-relative-links
        relative_links:
          enabled: true
          collections: true
        include:
          - CONTRIBUTING.md
          - README.md
          - LICENSE.md
          - COPYING.md
          - CODE_OF_CONDUCT.md
          - CONTRIBUTING.md
          - ISSUE_TEMPLATE.md
          - PULL_REQUEST_TEMPLATE.md
        EOF

    - name: Upload GitHub Pages artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: docs/

  # Deploy to GitHub Pages
  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: docs
    if: github.ref == 'refs/heads/main'
    
    permissions:
      pages: write
      id-token: write
    
    environment:
      name: env-github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v3

  # Notification Job
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, build, deploy-pages]  # TODO: Add 'docker' and 'security' back when jobs are enabled
    if: always()
    
    steps:
    - name: Notify Success
      if: ${{ needs.test.result == 'success' && needs.build.result == 'success' }}
      run: |
        echo "✅ Pipeline completed successfully!"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Build: ${{ needs.build.result }}"
        echo "- Security: (TODO: commented out)"
        echo "- Docker: (TODO: commented out)"
        echo "- Pages: ${{ needs.deploy-pages.result }}"

    - name: Notify Failure
      if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "❌ Pipeline failed!"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Build: ${{ needs.build.result }}"
        echo "- Security: (TODO: commented out)"
        echo "- Docker: (TODO: commented out)"
        echo "- Pages: ${{ needs.deploy-pages.result }}"
        exit 1 