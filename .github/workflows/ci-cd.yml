name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, ci-cd]

env:
  GO_VERSION: "1.22.2"
  NODE_VERSION: "20.11.0"

jobs:
  # Test Job
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: hotaku_test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

      - name: Run tests
        env:
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USER: root
          DB_PASSWORD: testpassword
          DB_NAME: hotaku_test_db
          JWT_SECRET: test-secret-key
        run: go test -v -race ./...

    # TODO: Coverage reporting temporarily disabled
    # - name: Generate coverage report
    #   run: go tool cover -html=coverage.out -o coverage.html

    # - name: Upload coverage reports
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: coverage-report
    #     path: |
    #       coverage.out
    #       coverage.html

    # - name: Check coverage threshold
    #   run: |
    #     COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
    #     echo "Current coverage: ${COVERAGE}%"
    #     if (( $(echo "$COVERAGE < 50" | bc -l) )); then
    #       echo "Coverage is below 50%"
    #       exit 1
    #     fi

  # Build Job
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build application
        run: |
          go build -v -o bin/hotaku-api .
          chmod +x bin/hotaku-api

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hotaku-api-binary
          path: bin/hotaku-api

  # TODO: Security Scan Job - Commented out for now
  # Enable this when ready to run security scanning
  # security:
  #   name: Security Scan
  #   runs-on: ubuntu-latest
  #   needs: test
  #
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #
  #   - name: Set up Go
  #     uses: actions/setup-go@v5
  #     with:
  #       go-version: ${{ env.GO_VERSION }}
  #
  #   - name: Run Gosec Security Scanner
  #     uses: securego/gosec@master
  #     with:
  #       args: ./...

  # TODO: Docker Build Job - Commented out for now
  # Enable this when ready to publish to container registry
  # docker:
  #   name: Docker Build
  #   runs-on: ubuntu-latest
  #   needs: [test, build]
  #   if: github.ref == 'refs/heads/main'
  #
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v4
  #
  #   - name: Log in to GitHub Container Registry
  #     uses: docker/login-action@v4
  #     with:
  #       registry: ghcr.io
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.GITHUB_TOKEN }}
  #
  #   - name: Extract metadata
  #     id: meta
  #     uses: docker/metadata-action@v5
  #     with:
  #       images: ghcr.io/${{ github.repository }}
  #       tags: |
  #         type=ref,event=branch
  #         type=ref,event=pr
  #         type=sha,prefix={{branch}}-
  #
  #   - name: Build and push Docker image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       file: ./Dockerfile
  #       push: true
  #       tags: ${{ steps.meta.outputs.tags }}
  #       labels: ${{ steps.meta.outputs.labels }}
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max

  # Documentation Job for GitHub Pages
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/ci-cd'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          cd openapi
          npm ci

      - name: Generate API documentation
        run: |
          cd openapi
          npm run docs:api

      # TODO: Coverage report download temporarily disabled
      # - name: Download coverage report
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: coverage-report
      #     path: docs/

      - name: Generate HTML documentation
        run: |
          cd openapi
          npm run docs:generate
          
          # Create the openapi directory structure
          mkdir -p dist/openapi
          cp dist/index.html dist/openapi/
          
          # Create Jekyll configuration for GitHub Pages
          cat > dist/_config.yml << EOF
          theme: jekyll-theme-minimal
          title: Hotaku API
          description: Go Gin REST API Documentation
          baseurl: ""
          url: "https://${{ github.repository_owner }}.github.io"
          plugins:
            - jekyll-relative-links
          relative_links:
            enabled: true
            collections: true
          include:
            - CONTRIBUTING.md
            - README.md
            - LICENSE.md
            - COPYING.md
            - CODE_OF_CONDUCT.md
            - ISSUE_TEMPLATE.md
            - PULL_REQUEST_TEMPLATE.md
          EOF
          
          # Create a simple index.html that redirects to the openapi docs
          cat > dist/index.html << EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Hotaku API</title>
              <style>
                  body { 
                      font-family: Arial, sans-serif; 
                      text-align: center; 
                      padding: 50px; 
                      background-color: #f5f5f5;
                      margin: 0;
                  }
                  .container {
                      max-width: 600px;
                      margin: 0 auto;
                      background: white;
                      padding: 40px;
                      border-radius: 8px;
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                  }
                  h1 { 
                      color: #333; 
                      margin-bottom: 20px;
                  }
                  .loading { 
                      color: #666; 
                      margin-bottom: 20px;
                  }
                  .link {
                      display: inline-block;
                      background: #007bff;
                      color: white;
                      padding: 12px 24px;
                      text-decoration: none;
                      border-radius: 4px;
                      margin-top: 20px;
                  }
                  .link:hover {
                      background: #0056b3;
                  }
                  .url {
                      background: #f8f9fa;
                      padding: 10px;
                      border-radius: 4px;
                      font-family: monospace;
                      margin: 20px 0;
                      color: #495057;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>Hotaku API</h1>
                  <p class="loading">Redirecting to API documentation...</p>
                  <div class="url">https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/openapi/</div>
                  <p>If you are not redirected automatically, click the button below:</p>
                  <a href="./openapi/" class="link">View API Documentation</a>
              </div>
          </body>
          </html>
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./openapi
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: openapi/dist

  # Deploy to GitHub Pages
  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: docs
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/infra/github-page-artifact'

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      - name: Debug
        run: |
          ls -la

  # Notification Job
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, build, deploy-pages] # TODO: Add 'docker' and 'security' back when jobs are enabled
    if: always()

    steps:
      - name: Notify Success
        if: ${{ needs.test.result == 'success' && needs.build.result == 'success' }}
        run: |
          echo "✅ Pipeline completed successfully!"
          echo "- Tests: ${{ needs.test.result }}"
          echo "- Build: ${{ needs.build.result }}"
          echo "- Security: (TODO: commented out)"
          echo "- Docker: (TODO: commented out)"
          echo "- Pages: ${{ needs.deploy-pages.result }}"

      - name: Notify Failure
        if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' }}
        run: |
          echo "❌ Pipeline failed!"
          echo "- Tests: ${{ needs.test.result }}"
          echo "- Build: ${{ needs.build.result }}"
          echo "- Security: (TODO: commented out)"
          echo "- Docker: (TODO: commented out)"
          echo "- Pages: ${{ needs.deploy-pages.result }}"
          exit 1
