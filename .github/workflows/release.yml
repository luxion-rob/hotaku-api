name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22.2'

    - name: Run tests
      run: go test -v ./...

    - name: Build for multiple platforms
      run: |
        # Create dist directory
        mkdir -p dist
        
        # Build for Linux AMD64
        GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o dist/hotaku-api-linux-amd64 .
        
        # Build for Linux ARM64
        GOOS=linux GOARCH=arm64 go build -ldflags="-w -s" -o dist/hotaku-api-linux-arm64 .
        
        # Build for Windows AMD64
        GOOS=windows GOARCH=amd64 go build -ldflags="-w -s" -o dist/hotaku-api-windows-amd64.exe .
        
        # Build for macOS AMD64
        GOOS=darwin GOARCH=amd64 go build -ldflags="-w -s" -o dist/hotaku-api-darwin-amd64 .
        
        # Build for macOS ARM64 (Apple Silicon)
        GOOS=darwin GOARCH=arm64 go build -ldflags="-w -s" -o dist/hotaku-api-darwin-arm64 .

    - name: Create checksums
      run: |
        cd dist
        sha256sum * > checksums.txt

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Generate changelog
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## Changes since $PREVIOUS_TAG" > CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
        else
          echo "## Initial Release" > CHANGELOG.md
          git log --pretty=format:"- %s (%h)" >> CHANGELOG.md
        fi
        
        # Set output for GitHub release
        {
          echo 'changelog<<EOF'
          cat CHANGELOG.md
          echo EOF
        } >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        body: ${{ steps.changelog.outputs.changelog }}
        files: |
          dist/*
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image for release
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        
        # Build and tag image
        docker build -t ghcr.io/${{ github.repository }}:${VERSION} .
        docker build -t ghcr.io/${{ github.repository }}:latest .
        
        # Push images
        docker push ghcr.io/${{ github.repository }}:${VERSION}
        docker push ghcr.io/${{ github.repository }}:latest

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: release
    
    steps:
    - name: Notify success
      run: |
        echo "üéâ Release ${{ github.ref_name }} created successfully!"
        echo "üì¶ Binaries available for multiple platforms"
        echo "üê≥ Docker image pushed to GitHub Container Registry"
        echo "üìñ Documentation updated" 